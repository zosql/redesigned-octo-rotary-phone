-- 1.Guest 1183. Give the booking_date and the number of nights for guest 1183.

-- Result:
+--------------+--------+
| booking_date | nights |
+--------------+--------+
| 2016-11-27   |      5 |
+--------------+--------+

-- soln1
SELECT date_format(booking_date,'%Y-%m-%d')booking_date,nights
FROM booking JOIN guest ON guest_id = guest.id
 WHERE guest_id=1183

-- soln2
SELECT date_format(booking_date,'%Y-%m-%d')booking_date,nights
FROM booking
 WHERE guest_id=1183

-- 2.When do they get here? List the arrival time and the first and last names for all guests due to arrive on 2016-11-05, order the output by time of arrival.

-- Result:
+--------------+------------+-----------+
| arrival_time | first_name | last_name |
+--------------+------------+-----------+
| 14:00        | Lisa       | Nandy     |
| 15:00        | Jack       | Dromey    |
| 16:00        | Mr Andrew  | Tyrie     |
| 21:00        | James      | Heappey   |
| 22:00        | Justin     | Tomlinson |
+--------------+------------+-----------+

select arrival_time, first_name, last_name
from booking
join guest on guest.id=guest_id
where booking_date='2016-11-05'
order by arrival_time

-- 3.Look up daily rates. Give the daily rate that should be paid for bookings with ids 5152, 5165, 5154 and 5295. Include booking id, room type, number of occupants and the amount.

-- Result:
+------------+---------------------+-----------+--------+
| booking_id | room_type_requested | occupants | amount |
+------------+---------------------+-----------+--------+
|       5152 | double              |         2 |  72.00 |
|       5154 | double              |         1 |  56.00 |
|       5295 | family              |         3 |  84.00 |
+------------+---------------------+-----------+--------+

-- soln1
select booking_id, room_type_requested, occupants, amount
from rate
join booking on room_type_requested=room_type
where booking_id IN (5152, 5165, 5154, 5295) and occupancy=occupants

-- soln2
select booking_id, room_type_requested, occupants, amount
from rate
join booking on room_type_requested=room_type and occupancy=occupants 
where booking_id IN (5152, 5165, 5154, 5295)

-- 4.Who’s in 101? Find who is staying in room 101 on 2016-12-03, include first name, last name and address.

-- Result:
+------------+-----------+-------------+
| first_name | last_name | address     |
+------------+-----------+-------------+
| Graham     | Evans     | Weaver Vale |
+------------+-----------+-------------+

select first_name, last_name, address
from booking
join guest on guest_id=guest.id
where
booking_date='2016-12-03' and room_no=101

-- 5.How many bookings, how many nights? For guests 1185 and 1270 show the number of bookings made and the total number of nights. Your output should include the guest id and the total number of bookings and the total number of nights.

-- Result:
guest_id	Bookings	Nights
1185	3	8
1270	2	3

-- soln1:
select guest_id, count(booking_id) Bookings, sum(nights) Nights
from guest
join booking on guest_id=guest.id
where guest_id = '1185' or guest_id='1270'
group by guest_id

-- soln2:
select guest_id, count(booking_id) Bookings, sum(nights) Nights
from guest
join booking on guest_id=guest.id
where guest_id IN (1185, 1270)
group by guest_id

-- 6.Ruth Cadbury. Show the total amount payable by guest Ruth Cadbury for her room bookings. You should JOIN to the rate table using room_type_requested and occupants.

-- Result:
+--------------------+
| SUM(nights*amount) |
+--------------------+
|             552.00 |
+--------------------+

-- soln1:
SELECT sum(amount*nights)
FROM booking 
JOIN guest ON guest_id = guest.id
join rate on occupants=occupancy and room_type_requested=room_type
 WHERE first_name='Ruth' and last_name='Cadbury'

-- soln2:
select sum(rate.amount*nights)+extra.amount
from rate
join booking on room_type_requested=room_type and occupancy=occupants
join guest on guest.id=guest_id
left join extra on extra.booking_id=booking.booking_id
where first_name ="Ruth" and last_name = "Cadbury"


-- 7. Including Extras. Calculate the total bill for booking 5346 including extras.

-- Result:
+-------------+
| SUM(amount) |
+-------------+
|      118.56 |
+-------------+

-- soln1:
Select A+B "SUM(amount)"
from
(
select booking_id as ID, sum(amount) A
from extra
where booking_id=5346
) Novo2

Join

(
select booking.booking_id ID, sum(nights*amount) B
from booking
join rate on room_type=room_type_requested and occupancy=occupants
where booking_id=5346
) Novo
On Novo.ID=Novo2.ID

-- soln2:
select round(sum(extra.amount)+sum(rate.amount*nights)/2,2)
from rate
join booking on room_type_requested=room_type and occupancy=occupants
join guest on guest.id=guest_id
left join extra on extra.booking_id=booking.booking_id
where booking.booking_id="5346"

-- 8.Edinburgh Residents. For every guest who has the word “Edinburgh” in their address show the total number of nights booked. Be sure to include 0 for those guests who have never had a booking. Show last name, first name, address and number of nights. Order by last name then first name.

-- Result:

first_name	last_name	address	nights
Deidre	Brock	Edinburgh North and Leith	0
Ian	Murray	Edinburgh South	13
Joanna	Cherry	Edinburgh South West	0
Michelle	Thomson	Edinburgh West	3
Tommy	Sheppard	Edinburgh East	0

-- soln1:
select first_name, last_name, address, coalesce(A,"0") nights
from
(
select first_name, last_name, address, sum(nights) A
from booking
right join guest on booking.guest_id=guest.id
where address LIKE '%Edinburgh%'
group by first_name
) Novo

-- soln2:
select last_name, first_name, address, coalesce(A,"0") nights
from
(
select last_name, first_name, address, sum(nights) A
from booking
right join guest on booking.guest_id=guest.id
where address LIKE '%Edinburgh%'
group by first_name
) Novo
order by last_name, first_name

-- 9.How busy are we? For each day of the week beginning 2016-11-25 show the number of bookings starting that day. Be sure to show all the days of the week in the correct order.

-- Result:
+------------+----------+
| i          | arrivals |
+------------+----------+
| 2016-11-25 |        7 |
| 2016-11-26 |        8 |
| 2016-11-27 |       12 |
| 2016-11-28 |        7 |
| 2016-11-29 |       13 |
| 2016-11-30 |        6 |
| 2016-12-01 |        7 |
+------------+----------+

select date_format(booking_date,'%Y-%m-%d') i, count(booking_id) arrivals
from booking
where booking_date between '2016-11-25' and '2016-12-01'
group by i

-- 10.How many guests? Show the number of guests in the hotel on the night of 2016-11-21. Include all occupants who checked in that day but not those who checked out.

-- Result:
+----------------+
| SUM(occupants) |
+----------------+
|             39 |
+----------------+

-- The sum of occupants in the hotel on 2016-11-21 will be equal to
-- those who checked in that day ie booking_date = '2016-11-21' and nights any
-- those who checked in 2016-11-20 (D-1) and stayed >2 nights ie  checked out on 22-11-2024
-- those who checked in 2016-11-19 (D-2) and stayed >3 nights ie checked out on 23-11-2024
-- those who checked in 2016-11-19 (D-3) and stayed >4 nights ie checked out on 24-11-2024
... and so on

-- another way to read the above is that booking_date <= '2016-11-21'
-- and date_add(booking_date, Interval nights DAY) > '2016-11-21'

select sum(occupants)
from booking
where booking_date <= '2016-11-21' and date_add(booking_date, Interval nights DAY) > '2016-11-21'

-- Guest House Assessment Hard

-- This has proved to be a major struggle to problem-solve!

-- 11.Coincidence. Have two guests with the same surname ever stayed in the hotel on the evening? Show the last name and both first names. Do not include duplicates.

-- Expected result: achieved!

+-----------+------------+-------------+
| last_name | first_name | first_name  |
+-----------+------------+-------------+
| Davies    | Philip     | David T. C. |
| Evans     | Graham     | Mr Nigel    |
| Howarth   | Mr George  | Sir Gerald  |
| Jones     | Susan Elan | Mr Marcus   |
| Lewis     | Clive      | Dr Julian   |
| McDonnell | John       | Dr Alasdair |
+-----------+------------+-------------+

-- 1st query attempt is not showing the right answer because it includes duplicates and self joining is creating additional issues
select *
from
(
select *
from guest a
join booking c on guest_id=a.id
) Novo
join
(
select *
from guest b
join booking d on guest_id=b.id
) Novo2
on a.last_name=b.last_name
where a.first_name != b.first_name
and b.booking_date = d.booking_date

-- soln2: WORKED!

select Novo2.last_name, Novo2.first_name, Novo.first_name
from
(
select *
from guest a
join booking c on guest_id=a.id
) Novo
join
(
select *
from guest b
join booking d on guest_id=b.id
) Novo2
on Novo.last_name=Novo2.last_name
where Novo.first_name <> Novo2.first_name
and date_add(Novo.booking_date, Interval Novo.nights DAY) > Novo2.booking_date and Novo.booking_date <= Novo2.booking_date
group by Novo2.last_name

-- 12.Check out per floor. The first digit of the room number indicates the floor – e.g. room 201 is on the 2nd floor. For each day of the week beginning 2016-11-14 show how many rooms are being vacated that day by floor number. Show all days in the correct order.

-- Expected result: achieved!
+------------+-----+-----+-----+
| i          | 1st | 2nd | 3rd |
+------------+-----+-----+-----+
| 2016-11-14 |   5 |   3 |   4 |
| 2016-11-15 |   6 |   4 |   1 |
| 2016-11-16 |   2 |   2 |   4 |
| 2016-11-17 |   5 |   3 |   6 |
| 2016-11-18 |   2 |   3 |   2 |
| 2016-11-19 |   5 |   5 |   1 |
| 2016-11-20 |   2 |   2 |   2 |
+------------+-----+-----+-----+

-- 1st query attempt shows the first two required columns: but logic is based on booking_date alone which means checkins and NOT checkouts as asked

select date_format(booking_date,'%Y-%m-%d') d, count(room_no) as "1st"
from booking
where booking_date between "2016-11-14" and "2016-11-20"
and room_no LIKE "1%"
group by d

-- 2nd query attempt: checkout logic = booking_date + nights: but it is not broken by floor number

select date_format(date_add(booking_date, Interval nights DAY),"%Y-%m-%d") i, count(*)
from booking
where date_add(booking_date, Interval nights DAY) between '2016-11-14' and '2016-11-20'
Group by i
Order by i

-- 3rd query attempt and success!

select Novo.i, 1st, 2nd, 3rd
from
(
select date_format(date_add(booking_date, Interval nights DAY),"%Y-%m-%d") as i, count(*) 1st
from booking
where date_add(booking_date, Interval nights DAY) between '2016-11-14' and '2016-11-20' and room_no LIKE "1%"
Group by i
Order by i
) Novo
Join
(
select date_format(date_add(booking_date, Interval nights DAY),"%Y-%m-%d") as i, count(*) 2nd
from booking
where date_add(booking_date, Interval nights DAY) between '2016-11-14' and '2016-11-20' and room_no LIKE "2%"
Group by i
Order by i
) Novo2
on Novo.i=Novo2.i
Join
(
select date_format(date_add(booking_date, Interval nights DAY),"%Y-%m-%d") as i, count(*) 3rd
from booking
where date_add(booking_date, Interval nights DAY) between '2016-11-14' and '2016-11-20' and room_no LIKE "3%"
Group by i
Order by i
) Novo3
on Novo2.i=Novo3.i

-- 13.Free rooms? List the rooms that are free on the day 25th Nov 2016.

-- Expected result: Achieved!
+-----+
| id  |
+-----+
| 207 |
| 210 |
| 304 |
+-----+

-- query attempt 1: gives room no where checkout is happening on 25th Nov 2016 precisely
select *
from booking
where date_add(booking_date, Interval nights DAY) <'2016-11-25' 
and booking_date <> '2016-11-25'
Group by room_no
Order by room_no

-- however, the inventory of rooms is much larger
-- checkout might already have happened which means booking date+ nights < 25/11/16
-- checkin didnt happen on 25/11/16

-- query attempt 2: booking date + night can be equal to 25/11/16 ie 24th+1 night = checkout on 25th and checkin shouldn't happen on 25th
select *
from booking
where date_add(booking_date, Interval nights DAY)<='2016-11-25' 
and booking_date!='2016-11-25'
Order by room_no

and 

select count(distinct(room_no))
from booking
where date_add(booking_date, Interval nights DAY)<='2016-11-25' 
and booking_date<>'2016-11-25'

-- this attempt is counting 100% of the rooms as available on 25/11/16 per this logic.

-- query attempt 3 based on the logic of subtracting from inventory rooms booked on 25/11/16 and those occupied due to previous bookings.

select *
from booking
where room_no NOT IN 
(select room_no
from booking
where date_add(booking_date, Interval nights DAY)>'2016-11-25'
group by room_no)

102
107
108
109
203
207
308

-- But only 7 rooms seem occupied leaving 21 rooms empty - which does not appear correct.

-- query attempt 4 - updated logic of rooms having been booked before or on 25/11/16 and having nights adding up to beyond 25/11/16
-- using combined logic of attempts 3 and 4

select distinct(id)
from room
join booking on booking.room_no=room.id
where id not IN 
(select distinct(room_no)
from booking
where date_add(booking_date, Interval nights DAY)>'2016-11-25' and booking_date <='2016-11-25'
group by room_no)

-- 14.Single room for three nights required. A customer wants a single room for three consecutive nights. Find the first available date in December 2016.

-- Desired result:
+-----+------------+
| id  | MIN(i)     |
+-----+------------+
| 201 | 2016-12-11 |
+-----+------------+

-- query 1 approach: 
-- we know how to find vacant room ids on any date from room table inventory from previous Q (from room table)
-- we know the where condition of this question booking_date between '2016-12-01' and '2016-12-29' (from booking table)
-- and room_type_requested= 'single' (from booking)

select *
from room
join booking on room_type_requested=room_type and max_occupancy=occupants
where booking_date between '2016-12-01' and '2016-12-31' and room_type_requested ='single'
group by booking_id
order by room_no,booking_date

-- Clearly the only options are going to be room_nos: 101, 201, 301 as single only rooms.
-- Also to date_add(booking_date, Interval 3 DAY) < 2016-12-29

-- Query 2 approach:
-- Finding occupied rooms is easier, and then performing NOT IN by room_no. 
-- The challenge is now to find the list of booked rooms and dates with a gap of 3 consequtive nights
-- ie. subsequent booking_date2 - (previous booking_date1+nights)>=3

-- Manual visual inspection from query 1:
-- From query 1 it is evident that 101 is booked for 3+5,8+2,10+5,15+3 - hence avai to stay from 18/12/16 for 3 days
-- 201 is booked for 1+2,3+4,7+4 - hence avai to stay from 11/12/16 for 3 days
-- 301 is booked for 2+2,4+1,5+4,12+1 - hence avai to stay from 10/12/16 for 2 days and 14/14/16 for 3 days
-- Clearly the by logic the winner is room 201 from 11/12/16 onwards.


-- 15.

select sum(amount) A
from extra

select sum(rate.amount*nights)
from rate
join booking on room_type_requested=room_type and occupancy=occupants
left join extra on extra.booking_id=booking.booking_id
