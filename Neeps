-- Neeps: easy questions

-- 1.Give the room id in which the event co42010.L01 takes place.

select room
from event
where id='co42010.L01'

-- Result:
room
cr.132

-- 2.For each event in module co72010 show the day, the time and the place.

select dow, tod, room
from event
where modle='co72010'

-- Result:
dow	tod	room
Wednesday	14:00	cr.SMH
Tuesday	09:00	cr.B8
Wednesday	09:00	co.B7
Tuesday	12:00	co.LB42+LB46
Tuesday	11:00	co.G75+G76
Wednesday	16:00	co.LB42+LB46
Thursday	10:00	co.LB42+LB46
Wednesday	13:00	co.117+118

-- 3.List the names of the staff who teach on module co72010.

select distinct(name)
from staff
join teaches on staff.id=teaches.staff
join event on teaches.event=event.id
where modle='co72010'

-- Result:
name
Cumming, Andrew
Chisholm, Ken

--4.Give a list of the staff and module number associated with events using room cr.132 on Wednesday, include the time each event starts.

select name, modle, tod
from staff
join teaches on staff.id=teaches.staff
join event on teaches.event=event.id
where room='cr.132' and dow='Wednesday'

-- Result:
name	modle	tod
Murray, Jim	co22009	12:00
Varey, Alison	co32021	09:00

-- 5.Give a list of the student groups which take modules with the word 'Database' in the name.

select student.id, student.name, event.modle, modle.name
from modle
join event on event.modle=modle.id
right join attends on attends.event=event.id
right join student on attends.student=student.id
where modle.name LIKE "%Database%"
group by student.id

-- Result:
id	name	modle	name
co4.CO	BSc4 Computing	co42009	Object Oriented Databases
co4.ND	BEng4 Network and Distributing Systems	co42009	Object Oriented Databases
com.IS	PgD Information Systems	co72010	Database systems
com.IS.a	PgD Information Systems a (HCI)	co72010	Database systems
com.IS.b	PgD Information Systems b (DS)	co72010	Database systems
com.IS.d	PgD Information Systems d (BT)	co72010	Database systems
com.IS.e	PgD Information Systems e (OOP)	co72010	Database systems
com.IS.tu	PgD Information System pt. Tues	co72010	Database systems
com.ITeC	PgD IT and e-Commerce	co72026	Very Large Databases
com.ITeC.feb		co72010	Database systems
com.ITeC.z3	PgD IT and e-Commerce eve sem 3	co72026	Very Large Databases
com.SE	PgD Software Engineering	co72010	Database systems
com.ST	PgD Software Technology	co72010	Database systems
com.ST.tu	PgD Software Technology pt. Tues	co72010	Database systems

-- Neeps: medium questions

-- 6.Show the 'size' of each of the co72010 events. Size is the total number of students attending each event.

select sum(sze)
from student

-- shows that there are total 2250 students

select *
from modle
where id='co72010'

-- final query

select modle, event, sum(sze)
from modle
join event on modle.id=event.modle
join attends on event.id=attends.event
join student on student.id=attends.student
where modle.id='co72010'
group by event

-- Result:
modle	event	sum(sze)
co72010	co72013.L01	215
co72010	co72013.L02	10
co72010	co72013.T01	40
co72010	co72013.T02	49
co72010	co72013.T03	10
co72010	co72013.T04	45
co72010	co72013.T05	35
co72010	co72013.T06	29

-- 7.For each post-graduate module, show the size of the teaching team. (post graduate modules start with the code co7).

select modle, count(distinct(staff))
from event
join teaches on teaches.event=event.id
where modle LIKE "co7%"
group by model

-- Result:
modle	count(distinc..
co72002	1
co72003	2
co72004	1
co72005	2
co72006	1
co72010	2
co72011	2
co72012	1
co72016	2
co72017	1
co72018	1
co72021	1
co72026	2
co72033	1

-- 8.Give the full name of those modules which include events taught for fewer than 10 weeks.

-- Query attempt 1
select distinct(modle.name)
from modle
join event on event.modle=modle.id
where event.id NOT IN (
select distinct(event)
from occurs
where week >= 10)

-- Result: WRONG because it is missing "Internet Multimedia" due to some oversight
name
Languages and Algorithms
Project
Interactivity and the Internet

-- Query attempt 2
select name
from modle
left join event on event.modle=modle.id
left join occurs on occurs.event=event.id
where modle.id NOT IN 
(
select modle.id
from modle
left join event on event.modle=modle.id
left join occurs on occurs.event=event.id
where week >=10
group by modle.id
)
and week is not NULL
group by modle.name

-- Result: WRONG because it is missing 3 module names now
name
Project

-- Query 3 attempt is to simply count the number of times an event id repeats in occurs to check for the number of weeks it ran for.
-- WORKED!

select distinct(modle.name)
from event
join
(
select event, count(event) C
from occurs
group by event
Having C <10
order by C
) Novo
on event.id=Novo.event
join modle on modle.id=event.modle

-- Result:
name
Languages and Algorithms
Project
Internet Multimedia
Interactivity and the Internet

-- 9.Identify those events which start at the same time as one of the co72010 lectures.

-- query attempt 1
select distinct(b.id)
from event a
join event b on a.tod=b.tod
where a.modle='co72010'

-- Result: WRONG and 170 in nos. issue is we only accounted for the tod and not the dow.
id
co12004.L01
co12004.T01
co12004.T03
co12004.T04
co12004.T05
co12004.T06

-- query attempt 2: No result!

select b.id
from event b
join
(
select modle, concat(dow,"-",tod)dowtod
from event a
) Novo
on b.concat(dow,"-",tod)=Novo.dowtod
where Novo.modle='co72010'

-- query attempt 3: Worked!

select event.id
from event
where concat(dow,"-",tod) IN
(select concat(dow,"-",tod)
from event
where modle='co72010')

-- Result: 42 events in count
id
co12004.T04
co12004.T05
co12005.T01
co12005.T04
co12006.L03
co12008.L01
co12012.T01
co22005.T02
co22005.T04
co22005.T07
co22005.T08
co22006.L02
co22008.T03
co22008.T04
co22009.T02
co32011.T03
co32014.T01
co32016.L01
co32018.L01
co32021.L01
co42001.L01
co42010.T01
co42015.T01
co72006.L01
co72013.L01
co72013.L02
co72013.T01
co72013.T02
co72013.T03
co72013.T04
co72013.T05
co72013.T06
co72016.T01
co72018.T01
coh2451.T01
coh8412555.L01
coh8412555.T02
coh8412585.T03
coh8412605.L01
coh8412605.T01
coh8412615.T03
coh8412615.T05

-- 10.How many members of staff have contact time which is greater than the average?

-- Query 1: What is the avg?

select avg(duration) as Avg
from teaches
join event on teaches.event=event.id

-- Result:
Avg
1.5261

-- Query 2: Contact time of each staff

select staff, sum(duration) over(partition by staff) as Sum
from teaches
join event on teaches.event=event.id
group by staff

-- Result:
staff	Sum
co.ACg	2
co.ACr	2
co.AFA	2
co.AL	1
co.AMn	1
co.ASc	2
co.ASr	1
co.AV	1
co.BC	2
co.CHt	2
co.CM	2
co.CMD	2
co.EH	2
co.FG	2
co.GR	2
co.GS	2
co.IS	2
co.JJ	1
co.JKg	2
co.JKy	2
co.JMy	2
co.JMz	2
co.JO	2
co.JSv	2
co.KB	1
co.KC	2
co.LM	2
co.MR	1
co.MS	2
co.PTr	2
co.RB	1
co.RK	1
co.RR	2
co.SL	2
co.SM	1
co.SRM	1
co.SS	1
co.ST	2
co.TG	2
co.TMc	2
co.TMu	2
co.TP	2
co.XL	2
co.ZZ1	2
co.ZZ7	1
co.ZZ8	1

-- Query 3 is a combination of queries 1 & 2.

select count(*)
from
(
select staff, sum(duration) over(partition by staff) as Sum
from teaches
join event on teaches.event=event.id
group by staff
) Novo
where Novo.Sum>(select avg(duration) as Avg
from teaches
join event on teaches.event=event.id
)

-- Result: WRONG according to peers.
count(*)
32

-- Query 4: Each staff member's sum of duration

select staff, sum(duration) T
from teaches
join event on teaches.event=event.id
group by staff
order by staff

-- Query 5: Each staff member's avg of duration

select avg(S)
from
(
select staff, sum(duration) S
from teaches
join event on teaches.event=event.id
group by staff
order by staff
) Novo

-- Result:
avg(S)
8.2609

-- Query 6: combo of result from the 5th query and input into the 4th query for Final RESULT!

select count(*)
from
(
select staff, sum(duration) T
from teaches
join event on teaches.event=event.id
group by staff
Having T>(select avg(S)
from
(
select staff, sum(duration) S
from teaches
join event on teaches.event=event.id
group by staff
order by staff
) Novo2
)
)Novo

-- Result:
count(*)
17

-- Neeps hard questions

-- 11.co.CHt is to be given all the teaching that co.ACg currently does. Identify those events which will clash.

-- Query approach 1: find the occupied days and time blocks for each staff and then find the clashes

-- Query 1 Part 1: staff co.ACg

select staff, b.event, a.id, date_format(a.wkstart,'%Y-%m-%d'), c.dow, c.tod, addtime(c.tod,concat(c.duration,':00')) toe
from week a
join occurs b on b.week=a.id
join event c on c.id=b.event
join teaches d on d.event=b.event
where staff='co.ACg'
order by dow, tod, toe

-- Query 1 Part 2: staff co.CHt

select staff, f.event, e.id, date_format(e.wkstart,'%Y-%m-%d'), g.dow, g.tod, addtime(g.tod,concat(g.duration,':00')) toe 
from week e
join occurs f on f.week=e.id
join event g on g.id=f.event
join teaches h on h.event=f.event
where staff='co.CHt'
order by dow, tod, toe

-- Query 1 Part 3: JOIN on same dow and same wk id

select Novo.staff, Novo2.staff, Novo.event, Novo2.event, Novo.dow, Novo2.dow, Novo.tod, Novo2.tod, Novo.toe, Novo2.toe
from
(
select staff, f.event, e.id, date_format(e.wkstart,'%Y-%m-%d'), g.dow, g.tod, addtime(g.tod,concat(g.duration,':00')) toe 
from week e
join occurs f on f.week=e.id
join event g on g.id=f.event
join teaches h on h.event=f.event
where staff='co.CHt'
order by dow, tod, toe
) Novo
join
(
select staff, b.event, a.id, date_format(a.wkstart,'%Y-%m-%d'), c.dow, c.tod, addtime(c.tod,concat(c.duration,':00')) toe
from week a
join occurs b on b.week=a.id
join event c on c.id=b.event
join teaches d on d.event=b.event
where staff='co.ACg'
order by dow, tod, toe
) Novo2
on Novo.id=Novo2.id and Novo.dow=Novo2.dow

-- Query 2: cross join then apply two conditions where Novo.tod<Novo2.tod and Novo.toe>Novo2.tod or Novo.tod>Novo2.tod and Novo2.toe>Novo.tod
-- Query 1 didnt work because the left or right join removed required rows unnecessarily hence needed to cross-join

select Novo3.E CHt, Novo3.E2 ACg
from
(
select Novo.staff S, Novo2.staff S2, Novo.id I, Novo2.id I2, Novo.event E, Novo2.event E2, Novo.dow D, Novo2.dow D2, Novo.tod TS1, Novo.toe TE1, Novo2.tod TS2,  Novo2.toe TE2
from
(
select staff, f.event, e.id, date_format(e.wkstart,'%Y-%m-%d'), g.dow, g.tod,(g.tod+g.duration) toe 
from week e
join occurs f on f.week=e.id
join event g on g.id=f.event
join teaches h on h.event=f.event
where staff='co.CHt'
order by dow, tod, toe
) Novo
cross join
(
select staff, b.event, a.id, date_format(a.wkstart,'%Y-%m-%d'), c.dow, c.tod, (c.tod+c.duration) toe
from week a
join occurs b on b.week=a.id
join event c on c.id=b.event
join teaches d on d.event=b.event
where staff='co.ACg'
order by dow, tod, toe
) Novo2
where Novo.id=Novo2.id and Novo.dow=Novo2.dow 
and ((Novo2.tod<Novo.toe and Novo.tod<=Novo2.tod) OR (Novo.tod<Novo2.toe and Novo2.tod<=Novo.tod))
)Novo3
Limit 2

-- Result: missing 1 overlapping event
CHt	ACg
co12005.T03	co12005.T01
co12005.T03	co72013.T03

-- Because every week id 01, 02, 03 except 09 only 2 events actually clash as per visual inspection.
-- double checking the results of https://github.com/keilorg/sqlzoo-solutions/blob/main/17%20University%20Timetables%2C%20Neeps.sql
-- ie. Result: 
cht_id	acg_id
co12005.T03	co12005.T01
co12005.T03	co72013.L02
co12005.T03	co72013.T03
-- double checking the results of https://github.com/HaminKo/SQLZoo-Solutions/blob/master/SQLZOO_Neeps_Answers.sql
-- ie. Result:
id	id
co12005.T03	co12005.T01 -- covered
co12005.T03	co72013.L02 -- covered 
co72006.T01	co42010.T01 -- check
co72021.T01	co72013.L01 -- check
co72021.L01	co72013.L01 -- repeat

-- Overlap of timeslots is clashing. What is overlap?
-- ST2>=ST1 and ST2<ET1
-- ST1>=ST2 and ST1<ET2

-- Query 3 - my query 2 definitely had a logic gap of start times could be == and either of the staff's events could be before the other

select Novo3.E CHt, Novo3.E2 ACg
from
(
select Novo.staff S, Novo2.staff S2, Novo.id I, Novo2.id I2, Novo.event E, Novo2.event E2, Novo.dow D, Novo2.dow D2, Novo.tod TS1, Novo.toe TE1, Novo2.tod TS2,  Novo2.toe TE2
from
(
select staff, f.event, e.id, date_format(e.wkstart,'%Y-%m-%d'), g.dow, g.tod,(g.tod+g.duration) toe 
from week e
join occurs f on f.week=e.id
join event g on g.id=f.event
join teaches h on h.event=f.event
where staff='co.CHt'
order by dow, tod, toe
) Novo
cross join
(
select staff, b.event, a.id, date_format(a.wkstart,'%Y-%m-%d'), c.dow, c.tod, (c.tod+c.duration) toe
from week a
join occurs b on b.week=a.id
join event c on c.id=b.event
join teaches d on d.event=b.event
where staff='co.ACg'
order by dow, tod, toe
) Novo2
where Novo.id=Novo2.id and Novo.dow=Novo2.dow 
and ((Novo2.tod<Novo.toe and Novo.tod<=Novo2.tod) OR (Novo.tod<Novo2.toe and Novo2.tod<=Novo.tod))
)Novo3
Limit 3

-- Result: matches the results of keilorg!
CHt	ACg
co12005.T03	co12005.T01
co12005.T03	co72013.L02
co12005.T03	co72013.T03

-- From HaminKO's result needed to check these events:
-- co72006.T01	with co42010.T01 	co72013.L02 co72013.T05-- checked -- haminko got this clashing pair wrong
-- co72021.T01	co72013.L01 -- checked -- ditto
	
-- 12.Produce a table showing the utilisation rate and the occupancy level for all rooms with a capacity more than 60.

-- query attempt 1 to find rooms with cap >60

select *
from room
where capacity>60

-- Result: Only 1 room has cap >60
id	name	capacity	parent
cr.SMH	St Margaret Hall	200	

-- Desc order check confirms this
-- Result:
id	name	capacity	parent
cr.SMH	St Margaret Hall	200	
co.LB42+LB46	LB42+LB46	40	
co.G78+G82	G78+G82	40	
co.G75+G76	G75+G76	40	

-- utilization rate
-- eg. avg 5 hours per day or 3 hours on Monday, 4 hours on Tuesday, etc

-- occupancy level
-- eg. sze/capacity*100

-- 13.A one hour staff meeting is to be held between 09:00 and 17:00. Events which clash are to be cancelled. Identify the hour which will result in the least disruption.

-- query 1 logic:
-- identify the count of events every tod and dow

select tod, tod+duration toe, dow, count(distinct(id)) Events
from event
group by tod, toe, dow
Having tod between '09:00' and '16:00'
Order by Events


-- 14.Find all clashes - include the events which clash and the staff, student or rooms that they have in common.

-- Query attempt 1: gives the result but several rows are repeated as ditto.
Select I,I2, D, D2, TS1, TE1, TS2, TE2, E, E2, S, S2, Stu1, Stu2, R1, R2, Clash_Of
from
(
Select I,I2, D, D2, TS1, TE1, TS2, TE2, E, E2, S, S2, Stu1, Stu2, R1, R2,
(
case
when S=S2 then "Staff"
when Stu1=Stu2 then "Student"
when R1=R2 then "Room"
else "No Clash"
end
) 'Clash_Of'
from
(
select Novo.id I, Novo2.id I2, Novo.dow D, Novo2.dow D2, Novo.event E, Novo2.event E2, Novo.staff S, Novo2.staff S2, Novo.tod TS1, Novo.toe TE1, Novo2.tod TS2,  Novo2.toe TE2, Novo.student Stu1, Novo2.student Stu2, Novo.room R1, Novo2.room R2
from
(
select staff, f.event, e.id, date_format(e.wkstart,'%Y-%m-%d'), g.dow, g.tod,(g.tod+g.duration) toe, r.student, g.room
from week e
join occurs f on f.week=e.id
join event g on g.id=f.event
join teaches h on h.event=f.event
join attends r on r.event=g.id 
order by e.id
) Novo
cross join
(
select staff, b.event, a.id, date_format(a.wkstart,'%Y-%m-%d'), c.dow, c.tod, (c.tod+c.duration) toe, s.student, c.room
from week a
join occurs b on b.week=a.id
join event c on c.id=b.event
join teaches d on d.event=b.event
join attends s on s.event=c.id
order by a.id
) Novo2
where Novo.id=Novo2.id and Novo.dow=Novo2.dow 
and ((Novo2.tod<Novo.toe and Novo.tod<=Novo2.tod) OR (Novo.tod<Novo2.toe and Novo2.tod<=Novo.tod)) and Novo.event<>Novo2.event
) Novo3
) Novo4
where Clash_Of<>"No Clash"

-- getting 240 rows that are clashing due to reasons of staff, students or room clash but clashed events info seem to be repeating in the resultant dataset
- Hence grouping by E and E2: only 8 rows remain as 2 room and 6 staff conflicts and 0 student conflicts. by adding code -- Group by E, E2

-- Result: WRONG! Because as can be seen, Friday rows are the same pair of clashing events!
I	I2	D	D2	TS1	TE1	TS2	TE2	E	E2	S	S2	Stu1	Stu2	R1	R2	Clash_Of
01	01	Tuesday	Tuesday	11:00	13	12:00	13	co12005.T01	co42010.T01	co.ACg	co.ACg	co1.CO.a	co4.SE	co.G78+G82	cr.G90+116	Staff
01	01	Tuesday	Tuesday	11:00	13	11:00	12	co12005.T01	co72013.T03	co.ACg	co.ACg	co1.CO.a	com.IS.tu	co.G78+G82	co.G75+G76	Staff
01	01	Friday	Friday	11:00	13	11:00	13	co22007.T01	co22020.T04	co.TMc	co.AFA	co2.CO.a	co2.NT.Ed	co.LB47	co.LB47	Room
01	01	Friday	Friday	11:00	13	11:00	13	co22020.T04	co22007.T01	co.AFA	co.TMc	co2.NT.Ed	co2.CO.a	co.LB47	co.LB47	Room
01	01	Thursday	Thursday	15:00	17	16:00	17	co42010.L01	co72023.T02	co.ACg	co.ACg	co4.CO	com.MM.b	cr.132	co.B7	Staff
01	01	Tuesday	Tuesday	12:00	13	11:00	13	co42010.T01	co12005.T01	co.ACg	co.ACg	co4.SE	co1.CO.a	cr.G90+116	co.G78+G82	Staff
01	01	Tuesday	Tuesday	11:00	12	11:00	13	co72013.T03	co12005.T01	co.ACg	co.ACg	com.IS.tu	co1.CO.a	co.G75+G76	co.G78+G82	Staff
01	01	Thursday	Thursday	16:00	17	15:00	17	co72023.T02	co42010.L01	co.ACg	co.ACg	com.MM.b	co4.CO	co.B7	cr.132	Staff

-- Query attempt 2 was focused on eliminating the duplicacy of cross join by using inner join of the Novo/Novo2 tables on T1.id<T2.id

Select I,I2, D, D2, TS1, TE1, TS2, TE2, E, E2, S, S2, Stu1, Stu2, R1, R2, Clash_Of
from
(
Select I,I2, D, D2, TS1, TE1, TS2, TE2, E, E2, S, S2, Stu1, Stu2, R1, R2,
(
case
when S=S2 then "Staff"
when Stu1=Stu2 then "Student"
when R1=R2 then "Room"
else "No Clash"
end
) 'Clash_Of'
from
(
select Novo.id I, Novo2.id I2, Novo.dow D, Novo2.dow D2, Novo.event E, Novo2.event E2, Novo.staff S, Novo2.staff S2, Novo.tod TS1, Novo.toe TE1, Novo2.tod TS2,  Novo2.toe TE2, Novo.student Stu1, Novo2.student Stu2, Novo.room R1, Novo2.room R2
from
(
select staff, f.event, e.id, date_format(e.wkstart,'%Y-%m-%d'), g.dow, g.tod,(g.tod+g.duration) toe, r.student, g.room
from week e
join occurs f on f.week=e.id
join event g on g.id=f.event
join teaches h on h.event=f.event
join attends r on r.event=g.id 
order by e.id
) Novo
inner join
(
select staff, b.event, a.id, date_format(a.wkstart,'%Y-%m-%d'), c.dow, c.tod, (c.tod+c.duration) toe, s.student, c.room
from week a
join occurs b on b.week=a.id
join event c on c.id=b.event
join teaches d on d.event=b.event
join attends s on s.event=c.id
order by a.id
) Novo2
on Novo.event<Novo2.event
where Novo.id=Novo2.id and Novo.dow=Novo2.dow 
and ((Novo2.tod<Novo.toe and Novo.tod<=Novo2.tod) OR (Novo.tod<Novo2.toe and Novo2.tod<=Novo.tod))
) Novo3
) Novo4
where Clash_Of<>"No Clash"
Group by E, E2

-- Result: appears correct!
I	I2	D	D2	TS1	TE1	TS2	TE2	E	E2	S	S2	Stu1	Stu2	R1	R2	Clash_Of
01	01	Tuesday	Tuesday	11:00	13	12:00	13	co12005.T01	co42010.T01	co.ACg	co.ACg	co1.CO.a	co4.SE	co.G78+G82	cr.G90+116	Staff
01	01	Tuesday	Tuesday	11:00	13	11:00	12	co12005.T01	co72013.T03	co.ACg	co.ACg	co1.CO.a	com.IS.tu	co.G78+G82	co.G75+G76	Staff
01	01	Friday	Friday	11:00	13	11:00	13	co22007.T01	co22020.T04	co.TMc	co.AFA	co2.CO.a	co2.NT.Ed	co.LB47	co.LB47	Room
01	01	Thursday	Thursday	15:00	17	16:00	17	co42010.L01	co72023.T02	co.ACg	co.ACg	co4.CO	com.MM.b	cr.132	co.B7	Staff

-- Now 120 rows remain
-- Removed grouping by E, E2, etc because the rows get bunched to check and it seems like it works!

-- Cleaned query 3 to display what is asked in the answer

-- 14.Find all clashes - include the events which clash and the staff, student or rooms that they have in common.

Select E, E2, Clash_Of,
(
case
when Clash_Of="Staff" then S
when Clash_Of="Student" then Stu1
when Clash_Of="Room" then R1
else "No_Clash"
end
) Common
from
(
Select I,I2, D, D2, TS1, TE1, TS2, TE2, E, E2, S, S2, Stu1, Stu2, R1, R2,
(
case
when S=S2 then "Staff"
when Stu1=Stu2 then "Student"
when R1=R2 then "Room"
else "No Clash"
end
) 'Clash_Of'
from
(
select Novo.id I, Novo2.id I2, Novo.dow D, Novo2.dow D2, Novo.event E, Novo2.event E2, Novo.staff S, Novo2.staff S2, Novo.tod TS1, Novo.toe TE1, Novo2.tod TS2,  Novo2.toe TE2, Novo.student Stu1, Novo2.student Stu2, Novo.room R1, Novo2.room R2
from
(
select staff, f.event, e.id, date_format(e.wkstart,'%Y-%m-%d'), g.dow, g.tod,(g.tod+g.duration) toe, r.student, g.room
from week e
join occurs f on f.week=e.id
join event g on g.id=f.event
join teaches h on h.event=f.event
join attends r on r.event=g.id 
order by e.id
) Novo
inner join
(
select staff, b.event, a.id, date_format(a.wkstart,'%Y-%m-%d'), c.dow, c.tod, (c.tod+c.duration) toe, s.student, c.room
from week a
join occurs b on b.week=a.id
join event c on c.id=b.event
join teaches d on d.event=b.event
join attends s on s.event=c.id
order by a.id
) Novo2
on Novo.event<Novo2.event
where Novo.id=Novo2.id and Novo.dow=Novo2.dow 
and ((Novo2.tod<Novo.toe and Novo.tod<=Novo2.tod) OR (Novo.tod<Novo2.toe and Novo2.tod<=Novo.tod))
) Novo3
) Novo4
where Clash_Of<>"No Clash"
Group by E, E2
Order By I, D Desc

-- Result:
E	E2	Clash_Of	Common
co12005.T01	co72013.T03	Staff	co.ACg
co12005.T01	co42010.T01	Staff	co.ACg
co42010.L01	co72023.T02	Staff	co.ACg
co22007.T01	co22020.T04	Room	co.LB47

-- Double check query 1 when Staff is Common

select E, E2
from
(
select Novo.id I, Novo2.id I2, Novo.dow D, Novo2.dow D2, Novo.event E, Novo2.event E2, Novo.staff S, Novo2.staff S2, Novo.tod TS1, Novo.toe TE1, Novo2.tod TS2,  Novo2.toe TE2, Novo.student Stu1, Novo2.student Stu2, Novo.room R1, Novo2.room R2
from
(
select staff, f.event, e.id, date_format(e.wkstart,'%Y-%m-%d'), g.dow, g.tod,(g.tod+g.duration) toe, r.student, g.room
from week e
join occurs f on f.week=e.id
join event g on g.id=f.event
join teaches h on h.event=f.event
join attends r on r.event=g.id 
order by e.id
) Novo
inner join
(
select staff, b.event, a.id, date_format(a.wkstart,'%Y-%m-%d'), c.dow, c.tod, (c.tod+c.duration) toe, s.student, c.room
from week a
join occurs b on b.week=a.id
join event c on c.id=b.event
join teaches d on d.event=b.event
join attends s on s.event=c.id
order by a.id
) Novo2
on Novo.event<Novo2.event
where Novo.id=Novo2.id and Novo.dow=Novo2.dow 
and ((Novo2.tod<Novo.toe and Novo.tod<=Novo2.tod) OR (Novo.tod<Novo2.toe and Novo2.tod<=Novo.tod))
) Novo3
where S=S2 -- no student conflict and 1 room conflict as expected
Group by E, E2

-- Staff Common Result: Perfect as expected
E	E2
co12005.T01	co42010.T01
co12005.T01	co72013.T03
co42010.L01	co72023.T02

-- Room Common Result:
E	E2
co22007.T01	co22020.T04
